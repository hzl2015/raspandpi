Capitalized, short (50 chars or less) summary

More detailed explanatory text, if necessary. If you fixed a problem
explain what caused the problem and what its consequences were. If it
isnâ€™t obvious, explain how it achieves its goal.

Wrap it to about 72 characters or so.  In some contexts, the first line
is treated as the subject of an email and the rest of the text as the
body. The blank line separating the summary from the body is critical
(unless you omit the body entirely); tools like rebase can get confused
if you run the two together.

Write your commit message in the imperative: "Fix bug" and not
"Fixed bug" or "Fixes bug." This convention matches up with commit
messages generated by commands like git merge and git revert.

- Bullet points are okay, too

- Typically a hyphen or asterisk is used for the bullet, followed by a
  single space, with blank lines in between, but conventions vary here

- Use a hanging indent

Things to avoid when creating commits:

 - Mixing whitespace changes with functional code changes

 - Mixing two unrelated functional changes

 - Sending large new features in a single giant commit

It may well be the case that the code for a new feature is only useful
when all of it is present. This does not, however, imply that the entire
 feature should be provided in a single commit. New features often
entail refactoring existing code. It is highly desirable that any
refactoring is done in commits which are separate from those
implementing the new feature.
